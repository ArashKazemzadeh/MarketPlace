// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistence.Contexts.SqlServer;

#nullable disable

namespace Persistence.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20230521181251_EditEntites")]
    partial class EditEntites
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ConsoleApp1.Models.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SellerId")
                        .HasColumnType("int");

                    b.Property<string>("Street")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("SellerId")
                        .IsUnique()
                        .HasFilter("[SellerId] IS NOT NULL");

                    b.ToTable("Addresses", (string)null);
                });

            modelBuilder.Entity("ConsoleApp1.Models.Auction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("EndDeadTime")
                        .HasColumnType("datetime");

                    b.Property<int>("HighestPrice")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartDeadTime")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("ProductId")
                        .IsUnique();

                    b.ToTable("Auctions", (string)null);
                });

            modelBuilder.Entity("ConsoleApp1.Models.Bid", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AuctionId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsAccepted")
                        .HasColumnType("bit");

                    b.Property<int?>("Price")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AuctionId");

                    b.ToTable("Bids");
                });

            modelBuilder.Entity("ConsoleApp1.Models.Booth", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("SellerId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK__Booth__E2D0E1DD5CEB9CEA");

                    b.HasIndex("SellerId")
                        .IsUnique()
                        .HasFilter("[SellerId] IS NOT NULL");

                    b.ToTable("Booths", (string)null);
                });

            modelBuilder.Entity("ConsoleApp1.Models.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int?>("SellerId")
                        .HasColumnType("int");

                    b.Property<int?>("TotalPrices")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK__Shopping__7A789A84E74B74AC");

                    b.HasIndex("CustomerId");

                    b.HasIndex("SellerId");

                    b.ToTable("Carts", (string)null);
                });

            modelBuilder.Entity("ConsoleApp1.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id")
                        .HasName("PK__Category__19093A2B7D631E80");

                    b.ToTable("Categories", (string)null);
                });

            modelBuilder.Entity("ConsoleApp1.Models.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int?>("CustomertId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ISAccepted")
                        .HasColumnType("bit");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ProductId");

                    b.ToTable("Comments", (string)null);
                });

            modelBuilder.Entity("ConsoleApp1.Models.Customer", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LastName")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id")
                        .HasName("PK__Buyer__4B81C1CA60F39982");

                    b.ToTable("Customer", (string)null);
                });

            modelBuilder.Entity("ConsoleApp1.Models.FileForUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<byte[]>("FileData")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("SellerId")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SellerId");

                    b.ToTable("Files", (string)null);
                });

            modelBuilder.Entity("ConsoleApp1.Models.ImageForProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("Image", (string)null);
                });

            modelBuilder.Entity("ConsoleApp1.Models.Invoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CartId")
                        .HasColumnType("int")
                        .HasColumnName("CartID");

                    b.Property<DateTime?>("DeliveryDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("OrderDate")
                        .HasColumnType("datetime");

                    b.Property<string>("PaymentInfo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentStatus")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("TotalPrices")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK__Invoice__D796AAD5A0B9A395");

                    b.HasIndex("CartId");

                    b.ToTable("Invoice", (string)null);
                });

            modelBuilder.Entity("ConsoleApp1.Models.Medal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SellerId")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("SellerId");

                    b.ToTable("Medals", (string)null);
                });

            modelBuilder.Entity("ConsoleApp1.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("Availability")
                        .HasColumnType("int");

                    b.Property<int?>("BasePrice")
                        .HasColumnType("int");

                    b.Property<int>("BidId")
                        .HasColumnType("int");

                    b.Property<int?>("BoothId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ISAccepted")
                        .HasColumnType("bit");

                    b.Property<bool>("InAuction")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id")
                        .HasName("PK__Product__B40CC6EDE2FD57A1");

                    b.HasIndex("BoothId");

                    b.ToTable("Product", (string)null);
                });

            modelBuilder.Entity("ConsoleApp1.Models.ProductsCart", b =>
                {
                    b.Property<int>("CartId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("CartId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductsCarts");
                });

            modelBuilder.Entity("ConsoleApp1.Models.Seller", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<double>("CommissionPercentage")
                        .HasColumnType("float");

                    b.Property<int?>("CommissionsAmount")
                        .HasColumnType("int");

                    b.Property<string>("CompanyName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("SalesAmount")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK__Seller__7FE3DBA13EC0B8EB");

                    b.ToTable("Sellers", (string)null);
                });

            modelBuilder.Entity("ProductsCategory", b =>
                {
                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("CategoryId", "ProductId")
                        .HasName("PK__Products__D249F64504564426");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductsCategory", (string)null);
                });

            modelBuilder.Entity("ConsoleApp1.Models.Address", b =>
                {
                    b.HasOne("ConsoleApp1.Models.Customer", "Customer")
                        .WithMany("Addresses")
                        .HasForeignKey("CustomerId");

                    b.HasOne("ConsoleApp1.Models.Seller", "Seller")
                        .WithOne("Address")
                        .HasForeignKey("ConsoleApp1.Models.Address", "SellerId");

                    b.Navigation("Customer");

                    b.Navigation("Seller");
                });

            modelBuilder.Entity("ConsoleApp1.Models.Auction", b =>
                {
                    b.HasOne("ConsoleApp1.Models.Product", "Product")
                        .WithOne("Auction")
                        .HasForeignKey("ConsoleApp1.Models.Auction", "ProductId")
                        .IsRequired()
                        .HasConstraintName("FK_Auction_Product1");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ConsoleApp1.Models.Bid", b =>
                {
                    b.HasOne("ConsoleApp1.Models.Auction", "Auction")
                        .WithMany("Bids")
                        .HasForeignKey("AuctionId")
                        .HasConstraintName("FK_Bids_Auction");

                    b.HasOne("ConsoleApp1.Models.Customer", "Customer")
                        .WithMany("Bids")
                        .HasForeignKey("AuctionId")
                        .HasConstraintName("FK_Bids_Buyer1");

                    b.Navigation("Auction");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("ConsoleApp1.Models.Booth", b =>
                {
                    b.HasOne("ConsoleApp1.Models.Seller", "Seller")
                        .WithOne("Booth")
                        .HasForeignKey("ConsoleApp1.Models.Booth", "SellerId");

                    b.Navigation("Seller");
                });

            modelBuilder.Entity("ConsoleApp1.Models.Cart", b =>
                {
                    b.HasOne("ConsoleApp1.Models.Customer", "Customer")
                        .WithMany("Carts")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("FK_Cart_Customer");

                    b.HasOne("ConsoleApp1.Models.Seller", "Seller")
                        .WithMany("Carts")
                        .HasForeignKey("SellerId");

                    b.Navigation("Customer");

                    b.Navigation("Seller");
                });

            modelBuilder.Entity("ConsoleApp1.Models.Comment", b =>
                {
                    b.HasOne("ConsoleApp1.Models.Customer", "Customer")
                        .WithMany("Comments")
                        .HasForeignKey("CustomerId");

                    b.HasOne("ConsoleApp1.Models.Product", "Product")
                        .WithMany("Comments")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_Comment_Product");

                    b.Navigation("Customer");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ConsoleApp1.Models.FileForUser", b =>
                {
                    b.HasOne("ConsoleApp1.Models.Seller", "Seller")
                        .WithMany("Files")
                        .HasForeignKey("SellerId")
                        .HasConstraintName("FK_File_Seller");

                    b.Navigation("Seller");
                });

            modelBuilder.Entity("ConsoleApp1.Models.ImageForProduct", b =>
                {
                    b.HasOne("ConsoleApp1.Models.Product", "Product")
                        .WithMany("Images")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_Image_Product");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ConsoleApp1.Models.Invoice", b =>
                {
                    b.HasOne("ConsoleApp1.Models.Cart", "Cart")
                        .WithMany("Invoices")
                        .HasForeignKey("CartId")
                        .HasConstraintName("FK__Invoice__Shoppin__4E88ABD4");

                    b.Navigation("Cart");
                });

            modelBuilder.Entity("ConsoleApp1.Models.Medal", b =>
                {
                    b.HasOne("ConsoleApp1.Models.Seller", "Seller")
                        .WithMany("Medals")
                        .HasForeignKey("SellerId")
                        .HasConstraintName("FK_Medal_Seller");

                    b.Navigation("Seller");
                });

            modelBuilder.Entity("ConsoleApp1.Models.Product", b =>
                {
                    b.HasOne("ConsoleApp1.Models.Booth", "Booth")
                        .WithMany("Products")
                        .HasForeignKey("BoothId")
                        .HasConstraintName("FK__Product__BoothID__3C69FB99");

                    b.Navigation("Booth");
                });

            modelBuilder.Entity("ConsoleApp1.Models.ProductsCart", b =>
                {
                    b.HasOne("ConsoleApp1.Models.Cart", "Cart")
                        .WithMany("ProductsCarts")
                        .HasForeignKey("CartId")
                        .IsRequired()
                        .HasConstraintName("FK_ProductsInCart_ShoppingCart");

                    b.HasOne("ConsoleApp1.Models.Product", "Product")
                        .WithMany("ProductsCarts")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("FK_ProductsCart_Product");

                    b.Navigation("Cart");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ProductsCategory", b =>
                {
                    b.HasOne("ConsoleApp1.Models.Category", null)
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .IsRequired()
                        .HasConstraintName("FK__ProductsI__Categ__4222D4EF");

                    b.HasOne("ConsoleApp1.Models.Product", null)
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("FK__ProductsI__Produ__4316F928");
                });

            modelBuilder.Entity("ConsoleApp1.Models.Auction", b =>
                {
                    b.Navigation("Bids");
                });

            modelBuilder.Entity("ConsoleApp1.Models.Booth", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("ConsoleApp1.Models.Cart", b =>
                {
                    b.Navigation("Invoices");

                    b.Navigation("ProductsCarts");
                });

            modelBuilder.Entity("ConsoleApp1.Models.Customer", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Bids");

                    b.Navigation("Carts");

                    b.Navigation("Comments");
                });

            modelBuilder.Entity("ConsoleApp1.Models.Product", b =>
                {
                    b.Navigation("Auction");

                    b.Navigation("Comments");

                    b.Navigation("Images");

                    b.Navigation("ProductsCarts");
                });

            modelBuilder.Entity("ConsoleApp1.Models.Seller", b =>
                {
                    b.Navigation("Address");

                    b.Navigation("Booth");

                    b.Navigation("Carts");

                    b.Navigation("Files");

                    b.Navigation("Medals");
                });
#pragma warning restore 612, 618
        }
    }
}
